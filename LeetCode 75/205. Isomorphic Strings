Given two strings s and t, determine if they are isomorphic.

Two strings s and t are isomorphic if the characters in s can be replaced to get t.

All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.

 

Example 1:

Input: s = "egg", t = "add"
Output: true
Example 2:

Input: s = "foo", t = "bar"
Output: false
Example 3:

Input: s = "paper", t = "title"
Output: true
 

Constraints:

1 <= s.length <= 5 * 104
t.length == s.length
s and t consist of any valid ascii character.

#solution

class Solution {
    public boolean isIsomorphic(String s, String t) {
        if(s.length() != t.length()){
            return false;
        }
        HashMap<Character,Character> mappingChar = new HashMap<>();
        HashMap<Character, Boolean> usedChar = new HashMap<>();
        for(int i = 0; i< s.length();i++){
            char ch1 = s.charAt(i);
            char ch2 = t.charAt(i);
            if(mappingChar.containsKey(ch1)){
                if(mappingChar.get(ch1) != ch2){
                    return false;
                }
            }else{
                 if(usedChar.containsKey(ch2)){
                     return false;
                 }   
                else{
                    mappingChar.put(ch1,ch2);
                    usedChar.put(ch2,true);
                }
                }
        }
        return true;
    }
}

Intuition: we need to check for each char at s and check if it is already mapped, 
          if it is mapped already then check whether it is mapped to the char at t. 
          If it is not mapped then check if char at t is already used or not,
          if it is used then return false otherwise map char at s to t and mark char at t as true in used HashSet.
