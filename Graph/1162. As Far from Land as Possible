Given an n x n grid containing only values 0 and 1, where 0 represents water and 1 represents land, find a water cell such that its distance to the nearest land cell is maximized, and return the distance. If no land or water exists in the grid, return -1.

The distance used in this problem is the Manhattan distance: the distance between two cells (x0, y0) and (x1, y1) is |x0 - x1| + |y0 - y1|.

 

Example 1:


Input: grid = [[1,0,1],[0,0,0],[1,0,1]]
Output: 2
Explanation: The cell (1, 1) is as far as possible from all the land with distance 2.
Example 2:


Input: grid = [[1,0,0],[0,0,0],[0,0,0]]
Output: 4
Explanation: The cell (2, 2) is as far as possible from all the land with distance 4.
 

Constraints:

n == grid.length
n == grid[i].length
1 <= n <= 100
grid[i][j] is 0 or 1

#Solution

class Solution {
     public int maxDistance(int[][] grid) 
  {
      // O(n * m) time
      // O(n * m) space
      if(grid == null || grid.length == 0)    return -1;
      
      int n = grid.length;
      int m = grid[0].length;
      boolean[][] visited = new boolean[n][m];
      
      return BFS(grid, visited, n, m);
  }
  
  public int BFS(int[][] grid, boolean[][] visited, int n, int m)
  {
      Queue<int[]> Q = new LinkedList<>();
      
      // 4 - directions : up, down, left, right
      int[][] directions = new int[][] {{1,0}, {-1,0}, {0,-1}, {0,1}};
      int res = -1;
      
      // update visited[][] and Queue
      for(int i = 0; i < n; i++)
      {
          for(int j = 0; j < m; j++)
          {
              if(grid[i][j] == 1)
              {
                  visited[i][j] = true;
                  Q.offer(new int[] {i, j});
              }
          }
      }
      
      while(!Q.isEmpty())
      {
          int[] cur = Q.poll();
          int x = cur[0], y = cur[1];
          
          for(int[] dir : directions)
          {
              int newX = dir[0] + x;
              int newY = dir[1] + y;
              
              // skip if it's out of boundary or already visited
              if(newX < 0 || newY < 0 || newX >= n || newY >= m || visited[newX][newY])
                  continue;
              
              //mark as visited so we won't re-visited
              visited[newX][newY] = true;
              
              grid[newX][newY] = grid[x][y] + 1;
              res = Math.max(res, grid[newX][newY]);
              
              Q.offer(new int[] {newX, newY});
          }
      }
      
      // res - 1 because the start point is a land which is 1
      return res == -1 ? -1 : res - 1;
  }
}
