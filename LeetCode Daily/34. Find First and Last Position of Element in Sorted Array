Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]
 

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109
nums is a non-decreasing array.
-109 <= target <= 109

#Solution

class Solution {
    public int[] searchRange(int[] nums, int target) {
        int start=-1,end=-1;
        int[] ans = new int[2];
        int lb=0,ub=nums.length-1,mid=0;
        while(lb<=ub){
            mid = lb + (ub-lb)/2;
            if(target==nums[mid]){
                start = mid;
                ub = mid-1;
            }
            else if(target > nums[mid]){
                lb = mid+1;
            }
            else{
                ub = mid-1;
            }
        }
        lb = 0; ub = nums.length-1;
        while(lb<=ub){
            mid = lb + (ub-lb)/2;
            if(target==nums[mid]){
                end = mid;
                lb = mid+1;
            }
            else if(target > nums[mid]){
                lb = mid+1;
            }
            else{
                ub = mid-1;
            }
        }
        ans[0] = start;
        ans[1] = end;
        return ans;
    }
}
