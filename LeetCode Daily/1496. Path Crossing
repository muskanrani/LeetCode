Given a string path, where path[i] = 'N', 'S', 'E' or 'W', each representing moving one unit north, south, east, or west, respectively. You start at the origin (0, 0) on a 2D plane and walk on the path specified by path.

Return true if the path crosses itself at any point, that is, if at any time you are on a location you have previously visited. Return false otherwise.

 

Example 1:


Input: path = "NES"
Output: false 
Explanation: Notice that the path doesn't cross any point more than once.

#Solution

class Solution {
    public boolean isPathCrossing(String path) {
        int x = 0;
        int y = 0;
        Set<String> visited = new HashSet<>();
        visited.add(x+","+y);
        String[] path1 = path.split("");
        for(int i = 0; i<path1.length; i++){
            if(path1[i].equals("E")){
                x++;
            }
            else if(path1[i].equals("W")){
                x--;
            }
            else if(path1[i].equals("N")){
                y++;
            }
            else if(path1[i].equals("S")){
                y--;
            }
            System.out.println("Axis :: ("+x+" , "+y+")" );
            
            if(visited.contains(x+","+y)){
                return true;
            }
            visited.add(x+","+y);
        }
        return false;
    }
}
