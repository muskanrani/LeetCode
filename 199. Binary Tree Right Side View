Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

 

Example 1:


Input: root = [1,2,3,null,5,null,4]
Output: [1,3,4]
Example 2:

Input: root = [1,null,3]
Output: [1,3]
Example 3:

Input: root = []
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100

#Solution

class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> answer = new ArrayList<>();
         dfs(root,0,answer);
        return answer;
    }
    public static void dfs(TreeNode root,int level, List<Integer> answer){
        if(root == null){
            return;
        }
        if(level == answer.size()){
            answer.add(root.val);
        }
        dfs(root.right,level+1,answer);
        dfs(root.left,level+1,answer);
    }
}
