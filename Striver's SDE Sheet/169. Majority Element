Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2
 

Constraints:

n == nums.length
1 <= n <= 5 * 104
-109 <= nums[i] <= 109

#Solution1

class Solution {
    public int majorityElement(int[] nums) {
    int cnt = 0;
    Arrays.sort(nums);
    for(int i =0; i< nums.length -1 ;i++){
        if( nums[i] == nums[i+1]){
            cnt++;
        }
        if(cnt >= (nums.length/2)){
            return nums[i];
        }
       
        else if(nums[i] != nums[i+1]){
            cnt = 0;
        }     
    }
        return 1;
    }
}

#Solution 2

class Solution {
    public int majorityElement(int[] nums) {
    int count = 0;
        int candidate = 0;

        for (int num : nums) {
            if (count == 0) {
                candidate = num;
            }
            if(num==candidate)
            count += 1; 
            else count -= 1; 
        }

        return candidate;
    }
}
