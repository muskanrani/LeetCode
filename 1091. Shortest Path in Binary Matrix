Given an n x n binary matrix grid, return the length of the shortest clear path in the matrix. If there is no clear path, return -1.

A clear path in a binary matrix is a path from the top-left cell (i.e., (0, 0)) to the bottom-right cell (i.e., (n - 1, n - 1)) such that:

All the visited cells of the path are 0.
All the adjacent cells of the path are 8-directionally connected (i.e., they are different and they share an edge or a corner).
The length of a clear path is the number of visited cells of this path.

 

Example 1:


Input: grid = [[0,1],[1,0]]
Output: 2
Example 2:


Input: grid = [[0,0,0],[1,1,0],[1,1,0]]
Output: 4
Example 3:

Input: grid = [[1,0,0],[1,1,0],[1,1,0]]
Output: -1
 

Constraints:

n == grid.length
n == grid[i].length
1 <= n <= 100
grid[i][j] is 0 or 1

#Solution

class Solution {
    public int shortestPathBinaryMatrix(int[][] grid) {
     int n = grid.length;
        if(grid[0][0] != 0 || grid[n - 1][n - 1] != 0) {
            return -1;
        }
        Queue<Pair<Integer, Integer>> queue = new LinkedList<>();
        queue.add(new Pair<>(0,0));
        grid[0][0] = 1;
        while(!queue.isEmpty()) {
            
            Pair<Integer, Integer> currentCell = queue.remove();
            
            int x = currentCell.getKey();
            int y = currentCell.getValue();
            int distance = grid[x][y];
            if(x == n - 1 && y == n - 1) {
                // reached the destination
                return distance;  
            }
            // Add all surrounding zero-valued cells
            // lower right
            if(x + 1 < n && y + 1 < n){
                if(grid[x + 1][y + 1] == 0) {
                    queue.add(new Pair<>(x + 1, y + 1));
                    grid[x + 1][y + 1] = distance + 1;
                }
            }
            // check right
            if(y + 1 < n) {
                if(grid[x][y + 1] == 0) {
                    queue.add(new Pair<>(x, y + 1));
                    grid[x][y + 1] = distance + 1;
                }
            }
            // check bottom
            if(x + 1 < n) {
                if(grid[x + 1][y] == 0) {
                    queue.add(new Pair<>(x + 1, y));
                    grid[x + 1][y] = distance + 1;
                }
            }
            // upper right
            if(x - 1 < n && x - 1 >= 0 && y + 1 < n) {
                if(grid[x - 1][y + 1] == 0) {
                    queue.add(new Pair<>(x - 1, y + 1));
                    grid[x - 1][y + 1] = distance + 1;
                }
            }
            // lower left
            if(x + 1 < n && y - 1 < n && y - 1 >= 0) {
                if(grid[x + 1][y - 1] == 0) {
                    queue.add(new Pair<>(x + 1, y - 1));
                    grid[x + 1][y - 1] = distance + 1;
                }
            }
            // check top
            if(x - 1 < n && x - 1 >= 0) {
                if(grid[x - 1][y] == 0) {
                    queue.add(new Pair<>(x - 1, y));
                    grid[x - 1][y] = distance + 1;
                }
            }
            // upper left
            if(x - 1 < n && x - 1 >= 0 && y - 1 < n && y - 1 >= 0) {
                if(grid[x - 1][y - 1] == 0) {
                    queue.add(new Pair<>(x - 1, y - 1));
                    grid[x - 1][y - 1] = distance + 1;
                }
            }
            // left
            if(y - 1 < n && y - 1 >= 0) {
                if(grid[x][y - 1] == 0) {
                    queue.add(new Pair<>(x, y - 1));
                    grid[x][y - 1] = distance + 1;
                }
            }

        }
        return -1;   
    }
}
